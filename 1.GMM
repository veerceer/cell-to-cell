# Bimodality analysis for Ntrk2 in pericytes (clean & review-ready)
# =========================
from pathlib import Path
import os, json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.sparse as sp
from sklearn.mixture import GaussianMixture

# =、
gene = "Ntrk2"          # 、
adata = peri_clean      # 、 AnnData
outdir = Path("ntrk2_bimodality")
outdir.mkdir(parents=True, exist_ok=True)

RANDOM_STATE = 42
BINS = 60
GMM_KS = (1, 2, 3)      
CUT_STRATEGY = "midpoint"  # 'midpoint' | 'bayes'（ midpoint）
LABEL_COL = f"{gene}_bimodal_group"

if gene not in adata.var_names:
    raise ValueError(f"{gene} 不在 adata.var_names 中")

X = adata[:, gene].X
expr = X.toarray().ravel() if sp.issparse(X) else np.asarray(X).ravel()
n = expr.size
nz_mask = expr > 0
expr_nz = expr[nz_mask]
n_zero = int((~nz_mask).sum())
p_zero = n_zero / n

print(f"[INFO] {gene} expression loaded. n={n}, zeros={n_zero} ({p_zero:.1%})")

# ========= 1)+ KDE =========
plt.figure(figsize=(6,4))
sns.histplot(expr, bins=BINS, kde=True, color="#4A90E2")
plt.title(f"{gene} expression in pericytes (all cells)")
plt.xlabel("log-normalized expression")
plt.ylabel("Density")
plt.tight_layout()
plt.savefig(outdir / f"{gene}_all_hist_kde.png", dpi=300)
plt.savefig(outdir / f"{gene}_all_hist_kde.tiff", dpi=300)
plt.close()

# ========= 2) Dip test=========
dip_results = {}
def safe_diptest(vec):
    try:
        import diptest
        stat, p = diptest.diptest(vec)
        return float(stat), float(p), None
    except ImportError:
        return None, None, "diptest not installed"
    except Exception as e:
        return None, None, f"diptest error: {e}"

stat_all, p_all, note_all = safe_diptest(expr)
dip_results["all"] = {"dip": stat_all, "p": p_all, "note": note_all}
if stat_all is not None:
    print(f"[DIP] ALL: dip={stat_all:.3f}, p={p_all:.3e}" if p_all is not None else f"[DIP] ALL: dip={stat_all:.3f}")

if expr_nz.size >= 20:
    stat_nz, p_nz, note_nz = safe_diptest(expr_nz)
else:
    stat_nz, p_nz, note_nz = None, None, "too few non-zero cells"
dip_results["nonzero"] = {"dip": stat_nz, "p": p_nz, "note": note_nz}
if stat_nz is not None:
    print(f"[DIP] NONZERO: dip={stat_nz:.3f}, p={p_nz:.3e}" if p_nz is not None else f"[DIP] NONZERO: dip={stat_nz:.3f}")
else:
    print(f"[DIP] NONZERO: {note_nz}")

# ========= 3) nozero：GMM BIC 比较（K=1/2/3）=========
bic_rows = []
best = None
if expr_nz.size >= 10:
    Z = expr_nz.reshape(-1, 1)
    for k in GMM_KS:
        gm = GaussianMixture(n_components=k, random_state=RANDOM_STATE)
        gm.fit(Z)
        bic = float(gm.bic(Z))
        bic_rows.append({"K": k, "BIC": bic})
        if (best is None) or (bic < best["BIC"]):
            best = {"K": k, "BIC": bic, "model": gm}
    bic_df = pd.DataFrame(bic_rows).sort_values("K")
    bic_df.to_csv(outdir / f"{gene}_nonzero_BIC.csv", index=False)
    print("[BIC] non-zero comparison:")
    print(bic_df)
else:
    bic_df = pd.DataFrame(columns=["K","BIC"])
    

# ========= 4) 非零：拟合 2-GMM 并可视化（若样本足够）=========
means, weights, sep, cutoff = None, None, None, None
if expr_nz.size >= 50:
    gmm2 = GaussianMixture(n_components=2, random_state=RANDOM_STATE).fit(expr_nz.reshape(-1,1))
    # 按均值排序，保证 [小峰, 大峰]
    order = np.argsort(gmm2.means_.ravel())
    means = gmm2.means_.ravel()[order]
    weights = gmm2.weights_[order]
    sep = float(abs(means[1] - means[0]))
    print(f"[GMM-2] non-zero: means={np.round(means,3)}, weights={np.round(weights,3)}, |Δμ|={sep:.3f}")

    # 拟合曲线图
    x_line = np.linspace(expr_nz.min(), expr_nz.max(), 500).reshape(-1,1)
    tot_pdf = np.exp(gmm2.score_samples(x_line))
    resp = gmm2.predict_proba(x_line)[:, order]  # 也排序对齐
    comp_pdf = resp * tot_pdf[:, None]

    plt.figure(figsize=(6,4))
    plt.hist(expr_nz, bins=BINS, density=True, alpha=0.5, color='gray', label="non-zero hist")
    plt.plot(x_line, comp_pdf[:,0], '--', label='Component 1')
    plt.plot(x_line, comp_pdf[:,1], '--', label='Component 2')
    plt.plot(x_line, tot_pdf, '-', color='black', lw=1.5, label='Total fit')
    plt.title(f"{gene} non-zero: 2-GMM fit")
    plt.xlabel("Expression")
    plt.ylabel("Density")
    plt.legend()
    plt.tight_layout()
    plt.savefig(outdir / f"{gene}_nonzero_gmm2_fit.png", dpi=300)
    plt.savefig(outdir / f"{gene}_nonzero_gmm2_fit.tiff", dpi=300)
    plt.close()

    # 操作性阈值（两均值中点；可替换为 Bayes 交点）
    cutoff = float(np.mean(means))
    print(f"[CUTOFF] operational cutoff = {cutoff:.4f} (midpoint)")
else:
    print("[GMM-2] 非零样本不足 50，跳过 2-GMM 可视化（如需可降低门槛）。")

# ========= 5) 标注 High/Low 标签（默认在全体上切分）=========
adata.obs[LABEL_COL] = "Low"
if cutoff is not None:
    adata.obs.loc[expr > cutoff, LABEL_COL] = "High"

# 若只在“非零表达”细胞里切分，使用下面这一行替换上面两行：
# adata.obs[LABEL_COL] = np.where(expr > 0, np.where(expr > cutoff, "High","Low"), "Low")

prop = adata.obs[LABEL_COL].value_counts(normalize=True).rename("proportion").mul(100).round(2)
prop.to_csv(outdir / f"{gene}_group_proportions.csv", header=True)
print("[GROUP] proportions (%):\n", prop)

# ========= 6) 摘要 JSON（便于写法&复现）=========
summary = {
    "n_total": int(n),
    "zeros": n_zero,
    "zero_fraction": float(p_zero),
    "nonzero_n": int(expr_nz.size),
    "dip_all": dip_results["all"],
    "dip_nonzero": dip_results["nonzero"],
    "bic_nonzero": bic_rows,
    "bic_best_K": (None if best is None else int(best["K"])),
    "gmm2_means_nonzero": (None if means is None else [float(means[0]), float(means[1])]),
    "gmm2_weights_nonzero": (None if weights is None else [float(weights[0]), float(weights[1])]),
    "gmm2_mean_gap": sep,
    "cutoff_strategy": CUT_STRATEGY,
    "cutoff_value": cutoff,
    "label_column": LABEL_COL,
    "proportions_percent": prop.to_dict()
}
with open(outdir / f"{gene}_zero_inflated_summary.json", "w") as f:
    json.dump(summary, f, indent=2)

# ========= 7) 保存 AnnData =========
saved_path = outdir / f"peri_with_{gene}_groups.h5ad"
adata.write(saved_path)
print(f"[SAVED] AnnData with '{LABEL_COL}' written to: {saved_path}")

# ========= 8) 控制台一句话总结 =========
def fmt_p(p):
    if p is None: return "NA"
    return f"{p:.2e}"

print(
    "\n[SUMMARY] "
    f"{gene}: zeros={p_zero:.1%}; "
    f"dip(all) p={fmt_p(dip_results['all']['p'])}; "
    f"dip(non-zero) p={fmt_p(dip_results['nonzero']['p'])}; "
    f"non-zero BIC best K={(None if best is None else int(best['K']))}; "
    f"GMM-2 |Δμ|={( 'NA' if sep is None else f'{sep:.3f}' )}; "
    f"High={prop.get('High',0):.2f}%, Low={prop.get('Low',0):.2f}%."
)

  
