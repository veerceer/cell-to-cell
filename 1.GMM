# Bimodality analysis for Ntrk2 in pericytes (clean & review-ready)
# =========================
from pathlib import Path
import os, json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.sparse as sp
from sklearn.mixture import GaussianMixture

gene = "Ntrk2"          # 
adata = peri_clean      #  AnnData
outdir = Path("ntrk2_bimodality")
outdir.mkdir(parents=True, exist_ok=True)

RANDOM_STATE = 42
BINS = 60
GMM_KS = (1, 2, 3)      
CUT_STRATEGY = "midpoint"  # 'midpoint' | 'bayes'（ midpoint）
LABEL_COL = f"{gene}_bimodal_group"

if gene not in adata.var_names:
    raise ValueError(f"{gene} no in adata.var_names ")

X = adata[:, gene].X
expr = X.toarray().ravel() if sp.issparse(X) else np.asarray(X).ravel()
n = expr.size
nz_mask = expr > 0
expr_nz = expr[nz_mask]
n_zero = int((~nz_mask).sum())
p_zero = n_zero / n

print(f"[INFO] {gene} expression loaded. n={n}, zeros={n_zero} ({p_zero:.1%})")

# ========= 1)+ KDE =========
plt.figure(figsize=(6,4))
sns.histplot(expr, bins=BINS, kde=True, color="#4A90E2")
plt.title(f"{gene} expression in pericytes (all cells)")
plt.xlabel("log-normalized expression")
plt.ylabel("Density")
plt.tight_layout()
plt.savefig(outdir / f"{gene}_all_hist_kde.png", dpi=300)
plt.savefig(outdir / f"{gene}_all_hist_kde.tiff", dpi=300)
plt.close()

# ========= 2) Dip test=========
dip_results = {}
def safe_diptest(vec):
    try:
        import diptest
        stat, p = diptest.diptest(vec)
        return float(stat), float(p), None
    except ImportError:
        return None, None, "diptest not installed"
    except Exception as e:
        return None, None, f"diptest error: {e}"

stat_all, p_all, note_all = safe_diptest(expr)
dip_results["all"] = {"dip": stat_all, "p": p_all, "note": note_all}
if stat_all is not None:
    print(f"[DIP] ALL: dip={stat_all:.3f}, p={p_all:.3e}" if p_all is not None else f"[DIP] ALL: dip={stat_all:.3f}")

if expr_nz.size >= 20:
    stat_nz, p_nz, note_nz = safe_diptest(expr_nz)
else:
    stat_nz, p_nz, note_nz = None, None, "too few non-zero cells"
dip_results["nonzero"] = {"dip": stat_nz, "p": p_nz, "note": note_nz}
if stat_nz is not None:
    print(f"[DIP] NONZERO: dip={stat_nz:.3f}, p={p_nz:.3e}" if p_nz is not None else f"[DIP] NONZERO: dip={stat_nz:.3f}")
else:
    print(f"[DIP] NONZERO: {note_nz}")

# ========= 3) nozero：GMM BIC comprise（K=1/2/3）=========
bic_rows = []
best = None
if expr_nz.size >= 10:
    Z = expr_nz.reshape(-1, 1)
    for k in GMM_KS:
        gm = GaussianMixture(n_components=k, random_state=RANDOM_STATE)
        gm.fit(Z)
        bic = float(gm.bic(Z))
        bic_rows.append({"K": k, "BIC": bic})
        if (best is None) or (bic < best["BIC"]):
            best = {"K": k, "BIC": bic, "model": gm}
    bic_df = pd.DataFrame(bic_rows).sort_values("K")
    bic_df.to_csv(outdir / f"{gene}_nonzero_BIC.csv", index=False)
    print("[BIC] non-zero comparison:")
    print(bic_df)
else:
    bic_df = pd.DataFrame(columns=["K","BIC"])
    

# ========= 4) no-zero：Fit a 2-GMM and plot the results=========
means, weights, sep, cutoff = None, None, None, None
if expr_nz.size >= 50:
    gmm2 = GaussianMixture(n_components=2, random_state=RANDOM_STATE).fit(expr_nz.reshape(-1,1))
    
    order = np.argsort(gmm2.means_.ravel())
    means = gmm2.means_.ravel()[order]
    weights = gmm2.weights_[order]
    sep = float(abs(means[1] - means[0]))
    print(f"[GMM-2] non-zero: means={np.round(means,3)}, weights={np.round(weights,3)}, |Δμ|={sep:.3f}")

    
    x_line = np.linspace(expr_nz.min(), expr_nz.max(), 500).reshape(-1,1)
    tot_pdf = np.exp(gmm2.score_samples(x_line))
    resp = gmm2.predict_proba(x_line)[:, order]  
    comp_pdf = resp * tot_pdf[:, None]

    plt.figure(figsize=(6,4))
    plt.hist(expr_nz, bins=BINS, density=True, alpha=0.5, color='gray', label="non-zero hist")
    plt.plot(x_line, comp_pdf[:,0], '--', label='Component 1')
    plt.plot(x_line, comp_pdf[:,1], '--', label='Component 2')
    plt.plot(x_line, tot_pdf, '-', color='black', lw=1.5, label='Total fit')
    plt.title(f"{gene} non-zero: 2-GMM fit")
    plt.xlabel("Expression")
    plt.ylabel("Density")
    plt.legend()
    plt.tight_layout()
    plt.savefig(outdir / f"{gene}_nonzero_gmm2_fit.png", dpi=300)
    plt.savefig(outdir / f"{gene}_nonzero_gmm2_fit.tiff", dpi=300)
    plt.close()

    
    cutoff = float(np.mean(means))
    print(f"[CUTOFF] operational cutoff = {cutoff:.4f} (midpoint)")
else:
    print("[GMM-2] sample no up to 50， no 2-GMM 。")


adata.obs[LABEL_COL] = "Low"
if cutoff is not None:
    adata.obs.loc[expr > cutoff, LABEL_COL] = "High"



prop = adata.obs[LABEL_COL].value_counts(normalize=True).rename("proportion").mul(100).round(2)
prop.to_csv(outdir / f"{gene}_group_proportions.csv", header=True)
print("[GROUP] proportions (%):\n", prop)

  
