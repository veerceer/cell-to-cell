mport numpy as np
import pandas as pd

CLASS_COL = "class_label"   
VASC_KEYWORDS = ("vasc",)   
CAP_EACH_CLASS = 10000     
SEED = 1

classes = adata.obs[CLASS_COL].astype(str)
is_vasc = classes.str.lower().str.contains("|".join(VASC_KEYWORDS))
print("recgonized vasclutureï¼š", classes[is_vasc].unique())

rs = np.random.RandomState(SEED)
keep_idx = []
keep_idx.extend(adata.obs_names[is_vasc])

for cls, idx in adata.obs[~is_vasc].groupby(CLASS_COL).groups.items():
    idx = np.array(list(idx))
    take = min(CAP_EACH_CLASS, len(idx))
    if take > 0:
        keep_idx.extend(rs.choice(idx, size=take, replace=False))

keep_idx = np.array(keep_idx, dtype=object)


adata_ds = adata[keep_idx, :].copy()

print(f"orginal cell number: {adata.n_obs:,}")
print(f"cell number after downsampling: {adata_ds.n_obs:,}")


before = adata.obs[CLASS_COL].value_counts().rename("before")
after  = adata_ds.obs[CLASS_COL].value_counts().rename("after")
comp = pd.concat([before, after], axis=1).fillna(0).astype(int).sort_index()
print(comp)

adata_nonvascular = adata[adata.obs['class_label'] != 'Vascular'].copy()

# combine adata_vascular and non-vascular
import anndata as ad

adata_updated = ad.concat([adata_nonvascular, adata_vascular], join="outer", axis=0)
adata_updated = adata_updated[adata.obs_names]  
print(adata_updated.obs['class_label'].value_counts())

sc.pl.umap(adata_updated, color='class_label', save='.tiff')

def simplify_class(label):
    label = str(label)
    if 'Endo' in label:
        return 'Endothelial'
    elif 'Ntrk2High' in label:
        return 'Peri_Ntrk2+'
    elif 'Ntrk2Zero' in label:
        return 'Peri_Ntrk2zero'
    elif 'SMC' in label:
        return 'SMC'
    elif 'VLMC' in label:
        return 'VLMC'
    elif 'OPC' in label or 'Oligo' in label:
        return 'OPC-Oligo'
    elif 'Astro' in label or 'Epen' in label:
        return 'Astrocyte'
    elif 'Immune' in label:
        return 'Microglia'
    elif 'GABA' in label:
        return 'Neuron_GABA'
    elif 'Glut' in label:
        return 'Neuron_Glutamate'
    elif 'Dopa' in label:
        return 'Neuron_Dopamine'
    elif 'Sero' in label:
        return 'Neuron_Serotonin'
    else:
        return 'Other'
adata_updated.obs['class_label_simplified'] = adata_updated.obs['class_label'].apply(simplify_class)

sc.pl.umap(
    adata_updated,
    color='class_label_simplified',
   save='.tiff'
)

import liana as li
import scanpy as sc
import numpy as np
import pandas as pd
import scipy.sparse as sp

print("LIANA version:", li.__version__)


ad = sc.read_h5ad("adata_updated.h5ad")
ad.var_names_make_unique()
ad = ad.copy()
groupby = "class_label_simplified"  

#  LIANA
li.mt.rank_aggregate(
    adata=ad,
    groupby=groupby,
    resource_name='mouseconsensus', 
    expr_prop=0.1,
    min_cells=5,
    use_raw=False,                  
    n_perms=1000,
    verbose=True,
    inplace=True

assert 'liana_res' in ad.uns and not ad.uns['liana_res'].empty, ""
res = ad.uns['liana_res'].copy()
print(res.head())
res.to_csv("liana_res.csv", index=False)

